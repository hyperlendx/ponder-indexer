import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
    Borrow: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        onBehalfOf: p.hex(),
        amount: p.bigint(),
        interestRateMode: p.int(),
        borrowRate: p.bigint(),
        referralCode: p.int(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    Repay: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        repayer: p.hex(),
        amount: p.bigint(),
        useATokens: p.boolean(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    Supply: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        onBehalfOf: p.hex(),
        amount: p.bigint(),
        referralCode: p.int(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    Withdraw: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        to: p.hex(),
        amount: p.bigint(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    LiquidationCall: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        collateralAsset: p.hex(),
        debtAsset: p.hex(),
        user: p.hex(),
        debtToCover: p.bigint(),
        liquidatedCollateralAmount: p.bigint(),
        liquidator: p.hex(),
        receiveAToken: p.boolean(),
        timestamp: p.int(),
        priceCollateral: p.bigint(),
        priceDebt: p.bigint(),
    }),
    FlashLoan: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        target: p.hex(),
        initiator: p.hex(),
        asset: p.hex(),
        amount: p.bigint(),
        interestRateMode: p.int(),
        premium: p.bigint(),
        referralCode: p.int(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    ReserveDataUpdated: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        liquidityRate: p.bigint(),
        stableBorrowRate: p.bigint(),
        variableBorrowRate: p.bigint(),
        liquidityIndex: p.bigint(),
        variableBorrowIndex: p.bigint(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    ReserveUsedAsCollateralEnabled: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        timestamp: p.int(),
    }),
    ReserveUsedAsCollateralDisabled: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        timestamp: p.int(),
    }),
    SwapBorrowRateMode: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        interestRateMode: p.int(),
        timestamp: p.int(),
    }),
    UserEModeSet: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        user: p.hex(),
        categoryId: p.int(),
        timestamp: p.int(),
    }),
    MintedToTreasury: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        amountMinted: p.bigint(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    MintUnbacked: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        onBehalfOf: p.hex(),
        amount: p.bigint(),
        referralCode: p.int(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    BackUnbacked: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        backer: p.hex(),
        amount: p.bigint(),
        fee: p.bigint(),
        timestamp: p.int(),
        price: p.bigint(),
    }),
    RebalanceStableBorrowRate: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        reserve: p.hex(),
        user: p.hex(),
        timestamp: p.int(),
    }),
    IsolationModeTotalDebtUpdated: p.createTable({
        id: p.string(),
        txHash: p.hex(),
        pool: p.hex(),
        asset: p.hex(),
        totalDebt: p.bigint(),
        timestamp: p.int(),
    }),
}));
